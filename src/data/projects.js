
const personalProjects = [
    {
        title: null,
        title_url: null,
        position: null,
        roll: null,
        date: null,
        description: null,
        technologies: null,
        code_url: null,
        project_url: null,
        shortlist: true
    },{
        title: "oAuth",
        title_url: null,
        position: null,
        roll: null,
        date: "Sept 2023 - Nov 2023",
        description: "This project implements the oAuth2.0 protocol, a token-based authentication system, from scratch. It uses an authentication server to store and manage user credentials and sessions according to the oAuth2.0 protocol. It then demos a full stack application utilizing oAuth with a React frontend served on an express.js backend. For demonstration purposes, access tokens duration is 10s and refresh token duration is 60s.",
        technologies: ['TypeScript/JavaScript', 'React', 'DynamoDB', 'Express.js', 'Axios', 'React-Cookies', 'jsonwebtoken', 'crypto', 'fs-extra', 'Mocha/Chai'],
        code_url: "https://github.com/paramtully/oAuth",
        project_url: null,
        shortlist: true
    },{
        title: 'Personal Website',
        title_url: null,
        position: null,
        detail: null,
        date: 'July 2023',
        description: 'A live website that summarizes my journey in CS. The project is built from scratch and is able to dynamically scale content to the browser window size. It also uses simple css animations to bring interactable components like links to life.',
        technologies: ['React', 'CSS3', 'GitHub Pages'],
        code_url: 'https://github.com/paramtully/paramtully.github.io',
        project_url: 'https://paramtully.github.io',
        shortlist: true
    },{
        title: 'GPA Calculator',
        title_url: null,
        position: null,
        roll: null,
        date: 'July 2022 â€“ May 2023',
        description: "A full-stack web app that calculates a UBC student's GPA. This is accomplished by scraping their grade data from UBC's ssc website in a headless browser. Chooses one of several device metadatas for the headless browser to prevent bot detection.",
        technologies: ['Python3', 'React', 'Selenium', 'Yarn', 'Flask', 'C++'],
        code_url: 'https://github.com/paramtully/UBC_GPA_Retriever',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Currency Converter',
        title_url: null,
        position: null,
        roll: null,
        date: 'July 2022',
        description: 'A simple frontend currency conversion application. Utilizes a public API to retrieve supported coutries and their conversion rates. Creates a drop-down from the supported countries countries. Sends API calls on form submissions and displays the returned value.',
        technologies: ['JavaScript', 'HTML', 'JSON'],
        code_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/CurrencyConverter',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Online Marketplace',
        title_url: null,
        position: null,
        roll: null,
        date: 'June - July 2022',
        description: 'A full-stack web application that allows users to list items, make bids, and comment on listings.',
        technologies: ['Django', 'HTML', 'Bootstrap (CSS)', 'SQLite'],
        code_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/OnlineMarketplace',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Brick Breaker Game',
        title_url: null,
        position: null,
        roll: null,
        date: 'Dec 2021',
        description: 'A recreation of a game from my childhood. The goal of the game is to break all of the bricks by intercepting the ball with a paddle and redirecting the ball to collide with the bricks. The game incorporated collision detection, random spawning of power-ups which can grant one of three bonuses: paddle extension, slow-mo balls, and multi-ball generation. The game also reduced coupling of score updating by using the observer pattern.',
        technologies: ['Java', 'JUnit', 'Swing'],
        code_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/BrickBreakerPlus',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Google Search Page',
        title_url: null,
        position: null,
        roll: null,
        date: 'July 2021',
        description: 'Recreated a fully functional Google Search page.',
        technologies: ['HTML', 'CSS'],
        code_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/GoogleSearch',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Tic-Tac-Toe Game',
        title_url: null,
        position: null,
        roll: null,
        date: 'May 2021',
        description: 'A single player game that competes against A.I. by using a brute force predictive algorithm involving arbitrary-arity trees and backtracking search.',
        technologies: ['Python', 'unittest'],
        code_url: null,
        project_url: null,
        shortlist: false
    },
]

const academicProjects = [
    {
        title: null,
        title_url: null,
        position: null,
        detail: null,
        date: null,
        description: null,
        technologies: null,
        code_url: null,
        project_url: null,
        shortlist: true
    },{
        title: 'Blog Website on CI/CD Pipeline',
        title_url: null,
        position: 'Cloud DevOps Engineer + Software Engineer (Backend)',
        detail: 'Worked on Team of 9',
        date: 'Jan - May 2023',
        description: 'I fully implemented a CI/CD pipeline using GCP supporting 3 build environments, concurrent pushes from 6+ developers, and reduced build and deploy times by 300%. I also contributed to the backend team by choosing our techstack, creating the external design (UML) for the backend, and working on implementation details with team members.',
        technologies: ['GCP', 'Docker', 'GitHub Actions', 'Java', 'React', 'Node.js', 'Maven', 'Spring Boot', 'Cloud SQL', 'JUnit', 'mocha/chai', 'Git'],
        code_url: null,
        project_url: null,
        shortlist: true
    },
    {
        title: 'Basketball League Tracker',
        title_url: null,
        position: null,
        detail: 'Worked on Team of 3',
        date: 'April 2023',
        description: "An application allowing users to check the stats of teams and players within their favourite basketball league. The database model was in EBNF format and contained relationships including weak entity sets and ISA hierarchies.",
        technologies: ['Java', 'Oracle SQL', 'Java Swing'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/NBA-Stat-Tracker',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Spotify Song Classification System',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2023',
        description: 'Trained a decision tree model to classify songs into one of several music genres based on data obtained from the Spotipy package.',
        technologies: ['Python3', 'Pandas', 'Numpy', 'sklearn', 'Decision Tree'],
        code_url: null,
        project_url: null,
        shortlist: true
    },
    {
        title: 'Insight UBC',
        title_url: null,
        position: 'Software Engineer (Backend)',
        detail: 'Worked on team of 3',
        date: 'Sept - Dec 2022',
        description: 'A full-stack web application that allows users to query UBCs historical grade data. The data is extracted and then processed from on html file using JSZip and stored in a local file.',
        technologies: ['TypeScript/JavaScript', 'JSZip', 'Express', 'Mocha/Chai', 'Yarn', 'HTML', 'Git'],
        code_url: null,
        project_url: null,
        shortlist: true
    },
    {
        title: 'Brute Force Password Decription',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2022',
        description: 'A multithreaded program that takes a hash and finds its associated password. This was accomplished by using a thread-pool to process possible passwords and semaphores to handle asynchronous events and prevent deadlocks.',
        technologies: ['C', 'Semaphores', 'Threads'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/Brute-Force-Password-Decryption',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Pruning Tree',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2022',
        description: 'Creates a binary tree representation of an image. Exploits tree structure to reduce memory usage by up to 100%.',
        technologies: ['C++'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/PruningTree',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Flood-Fill Animation',
        title_url: null,
        position: null,
        detail: null,
        date: 'March 2022',
        description: 'Constructed a series of functors that map the flood fill of an image using BFS/DFS. Created an array based stack to implement both a stack and a queue.',
        technologies: ['C++'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/Flood-Fill-Animation',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Social Media Application',
        title_url: null,
        position: null,
        detail: null,
        date: 'Oct - Dec 2021',
        description: "A device-bound social media application that modeled a full-stack web application. Included features such as adding and removing friends, posting to a profile, view other users' profiles, and direct messaging. A local JSON file was used to model a database. Bidirectional relationships within the Json file were efficiently handled by cleverly using class dependency structure and hashing.",
        technologies: ['Java', 'JUnit', 'Swing', 'JSON', 'Git'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/SocialMediaAppV1',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Matching Pairs Game',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2022',
        description: 'A comparison-based game utilizing linked lists to store and manipulate decks of cards, played through a CLI. Implemented an algorithm to randomly shuffle the cards in a linked list by swapping internal values at random indices.',
        technologies: ['C'],
        code_url: null,
        project_url: null,
        shortlist: false
    },
    {
        title: 'Predictive Machine Learning Model',
        title_url: null,
        position: null,
        detail: null,
        date: 'Nov 2022',
        description: 'Used a linear regression model to predict future values given an input CSV file. Animated the creation of a bar graph with Turtle.',
        technologies: ['Python', 'scikit-learn', 'Turtle'],
        code_url: null,
        project_url: null,
        shortlist: false
    },
];

const projects = [
    {
        title: null,
        categories: null,
        summary: null,
        description: null,
        technologies: null,
        start_date: null,
        end_date: null,
        github_url: null,
        live_url: null,
        org_url: null,
        importance: null
    },{
        title: 'oAuth2',
        categories: ['SWE', 'CyberSec'],
        summary: 'Implemented oAuth2.0 token based user authentication standard from scratch',
        description: [
            'The oAuth standard is commonly used to log in users and save users sessions securely without the need to re-authenticate after changing pages or leaving then revisiting the page.', 
            "I implemented oAuth with a separate authentication server which handles storing and validating login credentials and session information. The authentication server sends asymmetrically signed authentication tokens upon successful login which can then be stored securely in a cookie on the clientâ€™s browser. The authentication token can easily be verified by the backend with a public key, proving the sender is authorized to view their protected information. A refresh token is added to the authentication serverâ€™s response to allow userâ€™s to get new authorization tokens when they have expired without the need to enter login credentials again.",
            "This project was an opportunity to learn about some cybersecurity topics and security best practices in general. The biggest lesson was the need to hash and salt passwords (server-side) before storing them in databases, as it mitigates risk of attackers retrieving the userâ€™s passwords if the database gets leaked. I also got to learn about how to mitigate risk when sending proof of authentication over the internet by using signatures with asymmetric encryption and expiry dates.",
            'A diagram and more in depth explanation can be found on github, linked below.'
        ],
        technologies: ['TypeScript', 'React.js', 'Express.js', 'DynamoDB', 'Mocha/Chai'],
        start_date: null,
        end_date: new Date(2023, 11),
        github_url: "https://github.com/paramtully/oAuth",
        live_url: null,
        org_url: null,
        importance: 5,
    },{
        title: 'GPA Retriever',
        categories: ['SWE'],
        summary: "A script that logs into UBC's website, scrapes a user's grade data, then summarizes it with a few GPA metrics",
        description: [
            "I utilized Selenium, a tool is commonly used automate testing of live websites, to automate the process of logging into UBCâ€™s website, traverse the website to the userâ€™s grade data, scraping it, and summarizing it into a percent average, and gpa on a 4.0 and 4.33 scale.",
            "I originally designed the project as a full-stack website which I planned on releasing because UBCâ€™s website doesnâ€™t have a built in tool to calculate the userâ€™s GPA. However, I learned that it violated the terms of service and decided against it. The website was a simple React App that would make an HTTP request to a backend flask server that would run the python script and respond with the output of the summarized GPA data.",
            "I later created a C++ script that utilized exec calls to reduce the number of characters I needed to type (by 438%) to run the command line version of the application, which I used personally.",
        ],
        technologies: ['Python3', 'Selenium', 'Flask', 'React', 'Yarn', 'C++'],
        start_date: null,
        end_date: new Date(2023, 5),
        github_url: 'https://github.com/paramtully/UBC_GPA_Retriever',
        live_url: null,
        org_url: null,
        importance: 5,
    },{
        title: 'Online Marketplace',
        categories: ['SWE'],
        summary: "A full-stack web application that allows users to list items, make bids, and comment on listings.",
        description: [
            "An auction website where users could list and bid on items. Django was used for the backend, which utilized a SQLite relational database. The use of a relational database allowed for features such as filtering on the userâ€™s listings, items the user had bid on, and only showing active listings.",
        ],
        technologies: ['Django', 'HTML', 'Bootstrap (CSS)', 'SQLite'],
        start_date: null,
        end_date: new Date(2022, 6),
        github_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/OnlineMarketplace',
        live_url: null,
        org_url: null,
        importance: 3,
    },
    {
        title: 'Brick Breaker Game',
        categories: ['SWE'],
        summary: 'A recreation of the classic Brickbreaker game',
        description: [
            'I built this project for fun in a couple days in my second year of univsersity so I could play it when I got bored.',
            'The goal of the game is to break all of the bricks by intercepting the ball with a paddle and redirecting the ball to collide with the bricks. The game incorporated collision detection, random spawning of power-ups which can grant one of three bonuses: paddle extension, slow-mo balls, and multi-ball generation. The game also reduced coupling of score updating by using the observer pattern.',
            'I used Java Swing for the graphical UI, and JUnit for automated testing.',
        ],
        technologies: ['Java', 'JUnit', 'Java Swing'],
        start_date: null,
        end_date: new Date(2021, 12),
        github_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/BrickBreakerPlus',
        live_url: null,
        org_url: null,
        importance: 4,
    },
    {
        title: 'Google Search Page',
        categories: null,
        summary: 'Recreated a fully functional Google Search Page',
        description: [],
        technologies: ['HTML', 'CSS'],
        start_date: null,
        end_date: new Date(2021, 7),
        github_url: 'https://github.com/paramtully/TechnicalProjects/tree/main/GoogleSearch',
        live_url: null,
        org_url: null,
        importance: 1,
    },
    {
        title: 'Tic-Tac-Toe Game',
        categories: null,
        summary: 'null',
        description: null,
        technologies: ['Python', 'unittest'],
        start_date: null,
        end_date: new Date(2021, 5),
        github_url: null,
        live_url: null,
        org_url: null,
        importance: null,

        title: 'Tic-Tac-Toe Game',
        title_url: null,
        position: null,
        roll: null,
        date: 'May 2021',
        description: 'A single player game that competes against A.I. by using a brute force predictive algorithm involving arbitrary-arity trees and backtracking search.',
        technologies: ['Python', 'unittest'],
        code_url: null,
        project_url: null,
        shortlist: false
    },
    {
        title: null,
        title_url: null,
        position: null,
        detail: null,
        date: null,
        description: null,
        technologies: null,
        code_url: null,
        project_url: null,
        shortlist: true
    },{
        title: 'Blog Website on CI/CD Pipeline',
        title_url: null,
        position: 'Cloud DevOps Engineer + Software Engineer (Backend)',
        detail: 'Worked on Team of 9',
        date: 'Jan - May 2023',
        description: 'I fully implemented a CI/CD pipeline using GCP supporting 3 build environments, concurrent pushes from 6+ developers, and reduced build and deploy times by 300%. I also contributed to the backend team by choosing our techstack, creating the external design (UML) for the backend, and working on implementation details with team members.',
        technologies: ['GCP', 'Docker', 'GitHub Actions', 'Java', 'React', 'Node.js', 'Maven', 'Spring Boot', 'Cloud SQL', 'JUnit', 'mocha/chai', 'Git'],
        code_url: null,
        project_url: null,
        shortlist: true
    },
    {
        title: 'Basketball League Tracker',
        title_url: null,
        position: null,
        detail: 'Worked on Team of 3',
        date: 'April 2023',
        description: "An application allowing users to check the stats of teams and players within their favourite basketball league. The database model was in EBNF format and contained relationships including weak entity sets and ISA hierarchies.",
        technologies: ['Java', 'Oracle SQL', 'Java Swing'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/NBA-Stat-Tracker',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Spotify Song Classification System',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2023',
        description: 'Trained a decision tree model to classify songs into one of several music genres based on data obtained from the Spotipy package.',
        technologies: ['Python3', 'Pandas', 'Numpy', 'sklearn', 'Decision Tree'],
        code_url: null,
        project_url: null,
        shortlist: true
    },
    {
        title: 'Insight UBC',
        title_url: null,
        position: 'Software Engineer (Backend)',
        detail: 'Worked on team of 3',
        date: 'Sept - Dec 2022',
        description: 'A full-stack web application that allows users to query UBCs historical grade data. The data is extracted and then processed from on html file using JSZip and stored in a local file.',
        technologies: ['TypeScript/JavaScript', 'JSZip', 'Express', 'Mocha/Chai', 'Yarn', 'HTML', 'Git'],
        code_url: null,
        project_url: null,
        shortlist: true
    },
    {
        title: 'Brute Force Password Decription',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2022',
        description: 'A multithreaded program that takes a hash and finds its associated password. This was accomplished by using a thread-pool to process possible passwords and semaphores to handle asynchronous events and prevent deadlocks.',
        technologies: ['C', 'Semaphores', 'Threads'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/Brute-Force-Password-Decryption',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Pruning Tree',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2022',
        description: 'Creates a binary tree representation of an image. Exploits tree structure to reduce memory usage by up to 100%.',
        technologies: ['C++'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/PruningTree',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Flood-Fill Animation',
        title_url: null,
        position: null,
        detail: null,
        date: 'March 2022',
        description: 'Constructed a series of functors that map the flood fill of an image using BFS/DFS. Created an array based stack to implement both a stack and a queue.',
        technologies: ['C++'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/Flood-Fill-Animation',
        project_url: null,
        shortlist: false
    },
    {
        title: 'Social Media Application',
        title_url: null,
        position: null,
        detail: null,
        date: 'Oct - Dec 2021',
        description: "A device-bound social media application that modeled a full-stack web application. Included features such as adding and removing friends, posting to a profile, view other users' profiles, and direct messaging. A local JSON file was used to model a database. Bidirectional relationships within the Json file were efficiently handled by cleverly using class dependency structure and hashing.",
        technologies: ['Java', 'JUnit', 'Swing', 'JSON', 'Git'],
        code_url: 'https://github.com/paramtully/AcademicProjects/tree/main/SocialMediaAppV1',
        project_url: null,
        shortlist: true
    },
    {
        title: 'Matching Pairs Game',
        title_url: null,
        position: null,
        detail: null,
        date: 'April 2022',
        description: 'A comparison-based game utilizing linked lists to store and manipulate decks of cards, played through a CLI. Implemented an algorithm to randomly shuffle the cards in a linked list by swapping internal values at random indices.',
        technologies: ['C'],
        code_url: null,
        project_url: null,
        shortlist: false
    },
    {
        title: 'Predictive Machine Learning Model',
        title_url: null,
        position: null,
        detail: null,
        date: 'Nov 2022',
        description: 'Used a linear regression model to predict future values given an input CSV file. Animated the creation of a bar graph with Turtle.',
        technologies: ['Python', 'scikit-learn', 'Turtle'],
        code_url: null,
        project_url: null,
        shortlist: false
    },
];

export { academicProjects, personalProjects, projects };